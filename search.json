[{"title":"Hello World","url":"/2022/07/03/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"OOP上半部分","url":"/2022/07/15/OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/","content":"代码Dogs\npackage com.google.bean;    import lombok.Getter;  import lombok.Setter;  import lombok.ToString;    // 狗的特性和共性  // 类当中的变量和方法都称为属性    // @Getter 和 @Setter 写在类上面对于所有变量都行  // 也可以之对于单独的一个变量使用     @Getter @Setter private String name;@Getter  @Setter  @ToString  public class Dogs &#123;        // 成员变量：它们组成构成了类      // 狗的名字        // public 共有的,用户可以为所欲为      // private 私有的，用户不能为所欲为      private String name;      // 狗种类      private String variety;      // 狗年龄      private int age;      // 狗的食物      private String food;        // 静态变量 所属于类      // 使用 private 封装后对于静态变量只需要一个 Getter 函数即可      private static String plot = &quot;马古岗联合国&quot;;        // 构造方法      // 无参构造器      public Dogs() &#123;        &#125;        // 自己写的一个构造器，这个时候需要写一个 无参构造器（上面的那个函数）      public Dogs(String name, String variety, int age, String food) &#123;          this.name = name;          this.variety = variety;          this.age = age;          this.food = food;      &#125;        public Dogs(String name) &#123;          this.name = name;      &#125;        // 设计的一个函数，保证用户能输入age的值，但是不能乱搞，所以 一个get、一个set 函数      // 这种称为OOP的封装      // 安装 lombok后使用上面的注释即可      // 对于特殊的你可以单独写 -&gt; 方法的重载      public void setAge(int age) &#123;          if (age &lt;= 0 || age &gt;= 100) &#123;              System.out.println(&quot;您的输入不合法，已经将年龄清零&quot;);              this.age = 0;          &#125; else &#123;              this.age = age;          &#125;        &#125;          // 狗的行为      public void eat() &#123;          System.out.println(name + &quot;在吃饭，吃的...&quot;);      &#125;        public void sleep() &#123;          System.out.println(name + &quot;狗睡觉&quot;);      &#125;        public void sick() &#123;          System.out.println(&quot;狗生病&quot;);      &#125;        // 对于 静态变量 plot 的获取      public static String getPlot() &#123;          return plot;      &#125;        // 静态方法 同样也属于类      public static void vaccination() &#123;          System.out.println(&quot;所有的狗都需要来卫生院打狂犬疫苗&quot;);      &#125;  &#125;\n\nApplication\n// 使用界面import com.google.bean.Dogs;    public class Application &#123;      public static void main(String[] args) &#123;            Dogs zhangDog = new Dogs(&quot;jerry&quot;);            zhangDog.setFood(&quot;狗粮&quot;);          zhangDog.setVariety(&quot;柯基&quot;);          zhangDog.setAge(100);            System.out.println(&quot;狗的基本信息为：&quot; + zhangDog);            zhangDog.eat();          zhangDog.sleep();          zhangDog.sick();            Dogs.vaccination();          System.out.println(&quot;狗子属于：&quot; + Dogs.getPlot());      &#125;  &#125;\n\n\n类、对象以及对象的信息、行为Dogs代码块中的 Dogs 就是一个类，它表示狗这一类。\n里面的 age、variety、name等变量就是狗的一个基本信息，eat、sleep等方法表示的是狗的行为。\n在另外一个代码块中，你创建以zhangDog 这一变量其实就是创建了一个用户（使用对象）\npublic 和 privatepublic 共有的,用户可以为所欲为private 私有的，用户不能为所欲为\n封装使用 private 把狗的基本信息都封装起来，这样用户不能随便修改狗的信息，只能在你设定的范围内来修改\nGetter 和 Setter创建 get 和 set 函数来使用户可以访问到Dogs类中的变量的同时必须按照你设定的条件来设置狗的信息以及得到狗的信息\npublic void setAge(int age) &#123;      if (age &lt;= 0 || age &gt;= 100) &#123;          System.out.println(&quot;您的输入不合法，已经将年龄清零&quot;);          this.age = 0;      &#125; else &#123;          this.age = age;      &#125;    &#125;    public int getAge() &#123;      return age;  &#125;\n\n调用\nzhangDog.setFood(&quot;狗粮&quot;);  zhangDog.setVariety(&quot;柯基&quot;);  zhangDog.setAge(100);  System.out.println(zhangDog.getAge());  System.out.println(zhangDog.getFood());  System.out.println(zhangDog.getVariety());\n\nlombok导入 Lombok 的 jar 包后，可以直接使用 @Getter @Setter 便可以使用了\n@Getter 和 @Setter 写在类上面对于所有变量都行  \n也可以之对于单独的一个变量使用     @Getter @Setter private String name;\n对于某些变量需要特殊的修饰的可以再写一个方法来修饰（方法的重载）\ntoString对于需要把zhangDog的信息全部输出时候，我们可以写一个toString方法来输出\n@Override  public String toString() &#123;      return &quot;Dogs&#123;&quot; +              &quot;name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; +              &quot;, variety=&#x27;&quot; + variety + &#x27;\\&#x27;&#x27; +              &quot;, age=&quot; + age +              &quot;, food=&#x27;&quot; + food + &#x27;\\&#x27;&#x27; +              &#x27;&#125;&#x27;;  &#125;\n\n另外可以使用 @toString 的方法\n构造方法构造器无参构造器static关键字静态变量静态方法静态代码块this关键字注销账户空指针异常垃圾回收","tags":["markdown","OOP","java"]}]